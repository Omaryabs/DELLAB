import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
data = fetch_california_housing()
X = data.data
y = data.target
population = data.data[:, 4]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_val, y_train, y_val, population_train, population_val = train_test_split(
    X_scaled, y, population, test_size=0.2, random_state=42)
def build_multitask_model(input_size):
    input_layer = Input(shape=(input_size,))
    x = Dense(64, activation='relu')(input_layer)
    x = Dropout(0.5)(x)
    x = Dense(32, activation='relu')(x)
    x = Dropout(0.5)(x)
    task1_output = Dense(1, name='task1_output')(x)
    task2_output = Dense(1, name='task2_output')(x)
    model = Model(inputs=input_layer, outputs=[task1_output, task2_output])
    model.compile(optimizer=Adam(clipvalue=5.0),
                  loss={'task1_output': 'mse', 'task2_output': 'mse'},
                  metrics={'task1_output': 'mae', 'task2_output': 'mae'})
    return model

input_size = X_train.shape[1]
model = build_multitask_model(input_size)
model.summary()
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
history = model.fit(X_train,
                    {'task1_output': y_train, 'task2_output': population_train},
                    validation_data=(X_val, {'task1_output': y_val, 'task2_output': population_val}),
                    epochs=100,
                    batch_size=64,
                    callbacks=[early_stopping])
plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Train Loss', color='blue')
plt.plot(history.history['val_loss'], label='Validation Loss', color='red')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()
plt.show()
plt.figure(figsize=(10, 6))
plt.plot(history.history['task1_output_mae'], label='Task 1 MAE (Train)', color='blue')
plt.plot(history.history['task2_output_mae'], label='Task 2 MAE (Train)', color='green')
plt.plot(history.history['val_task1_output_mae'], label='Task 1 MAE (Validation)', color='red')
plt.plot(history.history['val_task2_output_mae'], label='Task 2 MAE (Validation)', color='orange')
plt.xlabel('Epochs')
plt.ylabel('Mean Absolute Error (MAE)')
plt.title('Task-wise MAE for Training and Validation')
plt.legend()
plt.show()
